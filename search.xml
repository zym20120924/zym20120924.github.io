<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[如何打包seajs代码]]></title>
      <url>%2F2017%2F01%2F%E5%A6%82%E4%BD%95%E6%89%93%E5%8C%85seajs%E4%BB%A3%E7%A0%81.html</url>
      <content type="text"><![CDATA[github源码地址 说明 package.json示例如下： 开发阶段代码如下 index.html代码示例 包装jquery.js 主模块main.js 第三方模块a.js代码如下： 上线打包阶段 github源码地址https://github.com/black-pony/seajs-gulp-packgithub源码地址 说明大家先把我的代码下载下来，对着这篇文档搞明白了再去玩自己的项目，否则会遇到问题的 package.json示例如下：123456789101112131415161718192021&#123; &quot;name&quot;: &quot;iheima&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot; &#125;, &quot;keywords&quot;: [], &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;dependencies&quot;: &#123; &quot;jquery&quot;: &quot;^3.1.1&quot;, &quot;seajs&quot;: &quot;^3.0.2&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;gulp&quot;: &quot;^3.9.1&quot;, &quot;gulp-cmd-pack&quot;: &quot;^1.0.9&quot;, &quot;gulp-uglify&quot;: &quot;^2.0.0&quot; &#125;&#125; 开发阶段代码如下index.html代码示例12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script src=&quot;./node_modules/seajs/dist/sea-debug.js&quot;&gt;&lt;/script&gt; &lt;script&gt; seajs.config(&#123; base:&apos;./js&apos;, alias:&#123; jquery:&apos;../node_modules/jquery/dist/jquery&apos; &#125; &#125;); seajs.use(&apos;main&apos;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 包装jquery.js这块直接拷贝我包装好的文件，不要自己尝试去修改，否则打包好了会报错的 主模块main.js123456789define(function(require,module,exports)&#123; &quot;use strict&quot;; var a = require(&apos;./a&apos;); $(document).click(function()&#123; alert(&apos;1&apos;); &#125;); console.log(2322); console.log(a);&#125;); 第三方模块a.js代码如下：1234define(function(require,exports,module)&#123; &quot;use strict&quot;; module.exports = &#123;title:22&#125;;&#125;); 上线打包阶段1.修改index.html代码如下： 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script src=&quot;./node_modules/seajs/dist/sea-debug.js&quot;&gt;&lt;/script&gt; &lt;script&gt; // seajs.config(&#123; // base:&apos;./js&apos;, // alias:&#123; // jquery:&apos;../node_modules/jquery/dist/jquery&apos; // &#125; // &#125;); // seajs.use(&apos;main&apos;); seajs.config(&#123; base:&apos;./dist/&apos; &#125;); seajs.use(&apos;main&apos;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 1.gulpfile.js如下： 123456789101112131415161718192021&quot;use strict&quot;;var gulp = require(&apos;gulp&apos;);var cmdPack = require(&apos;gulp-cmd-pack&apos;);var uglify = require(&apos;gulp-uglify&apos;);gulp.task(&apos;cmd&apos;, function () &#123; gulp.src(&apos;./js/main.js&apos;) //main文件 .pipe(cmdPack(&#123; mainId: &apos;main&apos;, //初始化模块的id base: &apos;./js&apos;, //base路径 alias: &#123; jquery: &apos;../node_modules/jquery/dist/jquery&apos; &#125; &#125;)) .pipe(uglify(&#123; //压缩文件，这一步是可选的 mangle: &#123; except: [&apos;require&apos;] &#125; &#125;)) .pipe(gulp.dest(&apos;./dist&apos;));//输出到目录 &#125;);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git工具小结]]></title>
      <url>%2F2016%2F08%2Fgit%E5%B7%A5%E5%85%B7%E5%B0%8F%E7%BB%93.html</url>
      <content type="text"><![CDATA[git工具小结git介绍 版本控制工具介绍 源代码有没有必要管理 常用的版本控制工具 版本控制工具的分类 学习内容 git的安装 git初始化一个仓库 将代码提交到仓库 查看工作区状态 比较文件差异 版本回退 Head指向 创建、切换、合并分支 多人提交代码冲突的解决 git提交代码到github远程服务器 课程内容###git介绍 版本控制工具介绍-有必要，因为人工维护成本太高，做相应的备份会很麻烦-常用的版本控制工具svn,vcs,tfs,git,hg…版本控制工具的分类 - 分布式 --&gt; git - 集中式 --&gt; svn,cvs git的历史 Git是linux之父当年为了维护linux—linus之前也是手动维护合并把文件发给Linus BitKeeper的代替品 linux之父开发的 git是什么 git是一款源代码管理工具（版本控制工具） git安装git初始化一个仓库 其实就是创建了一个.git隐藏目录 命令：git init 想在哪个目录创建.git目录，就是在哪个目录打开工具后写命令 一般是在项目的根目录执行这个命令 ## 练习 ### 操作步骤 1.创建一个文件夹2.在当前文件夹打开bash3.执行git init ### 观察 观察当前的文件夹的变化 ## 配置用户名、邮箱（自报家门） 配置用户名: git config user.name “testName” 配置邮箱 git config user.email “test@sina.com” 查看配置信息 git config –list ## 练习 1.执行上面操作2.执行git config –list,观察自己的配置有没有生效（注意：拼写不能错了，否则需要重新配置） 把代码提交到仓库中3.先把代码添加到暂存区（就相当于放到了仓库门口）4.命令 git add 文件路径5.示例： git add ./readme.md6.可以使用git add .这个命令，批量把当前目录下所有的修改过的文件添加到暂存区 练习7.把暂存区的文件提交到仓库里8.命令：git commit -m “注释”9.示例：git commit -m “我们添加了一个新功能”10.-m 表示指定一个字符串，作为提交的说明（相当于注释） 思考11.如何理解工作区(working dir)、暂存区(stage,index)、仓库(repo) 简化提交 如果是只针对于修改过的文件进行提交，命令可以简化成git commit -a -m “注释”(不适用于新创建的文件) 查看工作区状态 命令: git status 红色代表：新添加或者修改了，但是没有添加到暂存区 绿色代表：添加到了暂存区，但还没有添加到仓库 添加忽略文件 在项目中有一些文件是不需要提交的，我们需要把它忽略掉 需要在.git文件夹所在的父目录中新建一个名为.gitignore的文件示例: 1234/css/*.css/a.htmlb.html*.js 练习1.自己写一个忽略文件，代码如下：123/css/*.cssa.txtb.js 1.创建a.txt,b.js,创建一个css文件夹，里面创建一些css2.执行git status，观察当前工作区有没有改动 ## 对比文件差异 命令：git diff（视频讲的有问题） 用来比较工作区文件内容与仓库区文件内容的区别 如果执行了git add,再来执行git diff，则不会显示修改的内容 命令 git diff –cached比较暂存区的文件和仓库中的文件的区别 命令：git diff [版本号] [版本号] [想比较的文件路径] 注意换行符的问题：参考网址 由于linux操作系统和windows操作系统的换行符不一致，所以，我们需要设置下面： git config –global core.autocrlf false 练习1.执行git log,得到下面的信息 123456789101112$ git logcommit 522f54253de3d5dfbef422801d124fe449d2c642Author: demo1 &lt;2096667233@qq.com&gt;Date: Wed Dec 14 17:06:29 2016 +0800 wfecommit 5a8da7d6a3b997f2e6fc2756fdb7ea6bd0499e15Author: demo1 &lt;2096667233@qq.com&gt;Date: Wed Dec 14 17:02:19 2016 +0800 a 1.执行命令 git diff 522f54253de3d5dfbef422801d124fe449d2c642 5a8da7d6a3b997f2e6fc2756fdb7ea6bd0499e15 a.txt 查看日志 命令： git log 可以查看每一次提交的日志 命令：git log –oneline表示使用简洁的形式提交日志 ## 练习 ## 版本回退 命令：git reset –hard Head~1 –&gt; 将代码回退到上一次提交时的状态 命令 git reflog可以查看之前版本切换的操作 ## 练习 创建一个a.js文件 执行git add . 执行git commit -m ‘wf’ 查看当前的文件夹里面多了一个a.js文件 执行git reset –hard Head~1 查看当前的文件夹里面a.js消失了 ## 创建分支 命令：git branch [分支名] git branch查看当前所有的分支 ## 切换分支 git checkout [分支名] ### 练习 创建一个新的分支eric git branch eric 执行命令 git checkout eric 执行git branch，查看当前的工作区分支 ## 合并分支 git merge [分支名] ## 删除分支 git branch -d [分支名] 注意：当前的分支不能删除当前分支 ## 处理冲突 如果git不能自动合并分支，就会有冲突，我们需要手动解决冲突，然后再次提交 ## github ### github与git的关系 git版本管理工具 github就是一个网站，只是这个网站提供git的功能 ### 上传代码到github服务器（push) 命令：git push [远程服务器地址] [远程服务器的分支] 示例：git push https://github.com/black-pony/gitlianxi.git master 注意：在github上创建仓库的时候，要注意创建一个空的仓库 ### 上传时可以使用一些简化的命令 #### 将远程服务器的uri配置成变量 git remote add origin https://github.com/black-pony/gitlianxi.git ### 练习 执行git remote add origin https://github.com/black-pony/gitlianxi.git 创建一个新的文件比如叫m.js 执行git add . 执行git commit -m ‘wfe’ 执行git push origin master ### 注意事项 要保证当前的分支是master，如果你想把当前的修改提交到仓库的变动推送到远程仓库，必须使用命令： git push origin[你的分支名]:master #### 在push的时候加上-u参数，就会默认在本地当前分支和远程指定分支进行关联，下一次直接执行git push就行了 第一次执行git push origin master -u 第二次执行git push 参考资料：http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[理解观察者模式]]></title>
      <url>%2F2016%2F05%2F%E7%90%86%E8%A7%A3%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html</url>
      <content type="text"><![CDATA[理解观察者模式 场景 定义 现实生活中的观察者模式 其实我们用过观察者模式 为什么DOM 2.0会抛弃了onXXX系列的事件类型而转投到addEventListener的怀抱？ jQuery自定义事件 自己实现pub/sub模式 MVC 场景假设我们正在构建一个类似word的网页版的文字处理程序。每当用户按下一个键时，都要做很多事情，新键入的字符必须显示在屏幕上，插入点必须向后移动，这次键入的动作必须推入本地的撤销动作历历记录，且必须与服务器进行同步，拼写检查功能也必须运行起来，字数统计和页数统计也需要加以更新。用一个keypress来实现所有的这些任务甚至更多的任务，这显然会令人望而却步。这个时候，我们可以采用观察者模式。 定义定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。 现实生活中的观察者模式 订阅报纸 秘书 其实我们用过观察者模式 addEventListener on,off jQuery的自定义事件 为什么DOM 2.0会抛弃了onXXX系列的事件类型而转投到addEventListener的怀抱？1234567var oBtn = document.querySelector(&apos;#btn&apos;);oBtn.onclick = function()&#123; //task a; //task b; //task c; //task d;&#125;; 像上面这样写代码的缺点：容易写出来全能型的事件回调函数。 12345678910111213var oBtn = document.querySelector(&apos;#btn&apos;);oBtn.addEventListener(&apos;click&apos;,function()&#123; //任务a;&#125;);oBtn.addEventListener(&apos;click&apos;,function()&#123; //任务b;&#125;);oBtn.addEventListener(&apos;click&apos;,function()&#123; //任务c;&#125;);oBtn.addEventListener(&apos;click&apos;,function()&#123; //任务d;&#125;); jQuery自定义事件123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; id=&quot;btn&quot;&gt; &lt;script src=&quot;node_modules/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; //要想触发这个事件，可以在浏览器的控制台里输入$(&apos;#btn&apos;).triggerHandler(&apos;itcast&apos;) $(&apos;#btn&apos;).on(&apos;itcast&apos;,function()&#123; alert(&apos;itcast事件类型被触发&apos;); &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 自己实现pub/sub模式12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; id=&quot;btn&quot;&gt; &lt;script src=&quot;node_modules/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var PubSub = &#123;handlers:&#123;&#125;&#125;; PubSub.on = function(eventType,handler)&#123; if(!(eventType in this.handlers))&#123; this.handlers[eventType] = []; &#125; this.handlers[eventType].push(handler); return this; &#125;; PubSub.triggerHandler = function(eventType)&#123; if(!(eventType in this.handlers))&#123; return false; &#125; this.handlers[eventType].forEach(function(ele,index)&#123; ele(); &#125;); &#125;; PubSub.on(&apos;click&apos;,function()&#123; alert(111); &#125;); PubSub.on(&apos;click&apos;,function()&#123; alert(333); &#125;); PubSub.triggerHandler(&apos;click&apos;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; MVCMVC的核心关注点就是数据，当数据发生改变的时候，需要去通知我们的视图，这时候就可以采用我们的观察者模式。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《腾讯传》的感悟]]></title>
      <url>%2F2014%2F08%2F%E8%BF%91%E6%9C%9F%E7%9A%84%E6%84%9F%E6%82%9F.html</url>
      <content type="text"><![CDATA[近来看一本书叫《腾讯传》。讲腾讯从创立到现在的历史。颇有所得，也不在认为腾讯靠抄袭起家，确实是靠不断的微创新和良好的产品体验起来的。 小步快跑，试错迭代，一年下来产品就做成了马化腾这么说，也是这么做的。他还说过，互联网跟软件不一样，它能不断升级换代，这是无可比拟的优势。程序员们和产品经理们也从来没有安逸，在不断提升技术，改善体验中。QQ的成功离不开持续的努力。 不要盲目创新马化腾认为做好的产品在世上早已存在，模仿最成功的案例，然后再不断创新就可以成功。过于激进的创新很难让市场接受，同时也要思考用户真的需要创新技术，能够带来好的服务吗。 所有人都是在边做边学马化腾早期安排一个创始人攻克信息传输加密的技术。过了几个星期，马化腾去这个人家里，发现这个人出去了，桌子上翻开着一本书，马化腾拿起一看，书上写着“第一章 什么是加密”； 客户端不再重要，互联网上游的价值将重新崛起马化腾认为依靠一个QQ客户端，一个渠道就能成功的故事，不会再存在。价值链在互联网产业链正在上移。如果未来只依靠你的客户端，那么这个企业将步入一个巨大危机。哪怕是互联网的垄断企业，处境也并不安全。 需要的是服务马化腾坚信互联网是服务他人的，服务重于技术。他要求关注用户体验，产品经理要关注每周10个用户体验博客，100个用户邮件，与1000个用户的有效沟通。产品经理把自己当成傻瓜，任何使用都要简单，不要让用户动脑思考该怎么用。一个按钮放在左边还是右边要测试很久。在设计上他也推崇极简，他提到，软件只要谈谈的美术效果就好了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[用iframe做了一个代码预览的功能]]></title>
      <url>%2F2014%2F08%2F%E7%94%A8iframe%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E9%A2%84%E8%A7%88%E7%9A%84%E5%8A%9F%E8%83%BD.html</url>
      <content type="text"><![CDATA[受到前端网的代码预览启发,我也用iframe做了一个代码预览的功能.首先,设置html结构如下12345678910111213141516171819202122232425262728&lt;textarea&gt;html内容&lt;/textarea&gt;&lt;script type="text/javascript"&gt; function changeTemp()&#123; var html=$('textarea').val(); var reg1=/&amp;lt;/g; var reg2=/&amp;gt;/g; var reg3=/&amp;amp;/g; var a; while(a=reg1.exec(html))&#123; //将被转义的符号替换回来 html=html.replace(reg1,"&lt;"); html=html.replace(reg2,"&gt;"); html=html.replace(reg3,"&amp;"); &#125; //发送ajax; $.ajax(&#123; type:'post', url:'getArticle.php', data:&#123;html:html&#125;, success:function(result)&#123; &#125; &#125;);&#125; changeTemp();&lt;/script&gt;&lt;!--先不要设置iframe的src,等文档全部加载完成,也就是服务器做好处理之后,再给iframe引用--&gt;&lt;iframe&gt;&lt;/iframe&gt; 然后,服务器的getArticle.php脚本做出处理,根据textarea的值,修改temp.html的内容.temp.html由服务器在服务器内部生成iframe最后是要引用temp.html.1234567891011&lt;?php error_reporting(E_ALL^E_NOTICE^E_WARNING);//这段代码让php的错误不在网页显示 if($_POST['html'])&#123; $str=$_POST['html'];//html代码 $file='temp.html'; file_put_contents($file,$str);//根据$str的内容生成文件 &#125;?&gt; 最后,在页面加载完毕之后,设置iframe的src.123$(function()&#123; $('iframe').attr('src','temp.html'); &#125;); 这样,就可以在网页上预览前端代码的整个网页效果了 另外,PHP5.4之前的版本,会自动对get,post的数据进行转义,如果你不想看到诸如:/“,/‘这样的符号出现在代码中,可以在php.ini中设置magic_quotes_gpc=Off.当然也有其它的办法,我暂时只了解这一种.实在不行就升级PHP版本,这是历史遗留问题.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[选中文本背景色和代码标签]]></title>
      <url>%2F2014%2F07%2F%E9%80%89%E4%B8%AD%E6%96%87%E6%9C%AC%E8%83%8C%E6%99%AF%E8%89%B2%E5%92%8C%E4%BB%A3%E7%A0%81%E6%A0%87%E7%AD%BE.html</url>
      <content type="text"><![CDATA[伪元素::selection123456p::selection,h1::selection&#123; background-color: #B1DFD5; &#125;p::-moz-selection,h1::-moz-selection&#123; background-color: #B1DFD5;&#125; 使用这段代码,网站的p标签里文字被选择是背景是绿色的.-moz-为兼容火狐浏览器 响应式网站使用了两套甚至多套代码code和pre标签,能够像markdown那些显示代码 这两个标签是专门用来告诉浏览器里面的内容是代码.区别有: 1.pre标签能显示多行代码,code标签显示单行代码, 2.pre标签能识别代码里面的换行符和空格,保留原来的样式,而code标签不会. 这里是pre标签的效果 &lt;pre&gt; 输入这段代码就有下面的效果 输入这段代码就有下面的效果&lt;/pre&gt;下面是code的效果&lt;code&gt;输入这段代码就有下面的效果&lt;/code&gt;下面是IDE里面的源代码]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo提交到github]]></title>
      <url>%2F2014%2F06%2Fhexo%E6%8F%90%E4%BA%A4%E5%88%B0github.html</url>
      <content type="text"><![CDATA[hexo提交到github配置ssh 打开git bash终端。 设置user.name和user.email。 `git config –global user.name “你的GitHub用户名”git config --global user.email &quot;你的GitHub注册邮箱&quot;` 生成ssh密匙ssh-keygen -t rsa -C “你的GitHub注册邮箱” 将公匙添加到github上 hexo安装与配置 执行以下命令安装hexo 123456789101112131415161718执行以下命令安装hexo。# 安装hexonpm install hexo-cli g# 初始化博客文件夹hexo init blog# 切换到该路径cd blog# 安装hexo的扩展插件npm install# 安装其它插件npm install hexo-server --savenpm install hexo-admin --savenpm install hexo-generator-archive --savenpm install hexo-generator-feed --savenpm install hexo-generator-search --savenpm install hexo-generator-tag --savenpm install hexo-deployer-git --savenpm install hexo-generator-sitemap --save 第一次使用hexo，在本地创建服务器使用。 生成静态页面 hexo generate 开启本地服务器 hexo s 将hexo博客部署到github上 修改配置文件blog/_config.yml，修改deploy项的内容123456789# Deployment 注释## Docs: https://hexo.io/docs/deployment.htmldeploy: # 类型 type: git # 仓库 repo: git@github.com:xuezhisd/xuezhisd.github.io.git # 分支 branch: master 部署hexo 输入下面的命令将hexo博客部署到github中：123456# 清空静态页面hexo clean# 生成静态页面hexo generate# 部署 hexo deploy hexo命令缩写 hexo支持命令缩写，如下所示。hexo g等价于hexo generate 1234hexo g：hexo generatehexo c：hexo cleanhexo s：hexo serverhexo d：hexo deploy hexo组合命令1234# 清除、生成、启动hexo clean &amp;&amp; hexo g -s# 清除、生成、部署hexo clean &amp;&amp; hexo g -d]]></content>
    </entry>

    
  
  
</search>
